# Fa√ßa um programa que leia um ano qualquer e mostre se ele √© bissexto.
#
# Form√∫la:
# Para saber se um ano √© bissexto, devemos verificar se ele se encaixa em
# um dos casos:
#
# Caso 1) √â um n√∫mero divis√≠vel por 4, mas n√£o √© divis√≠vel por 100.
# Caso 2) √â um n√∫mero divis√≠vel por 4, por 100 e por 400.
#
# Lembre-se que um n√∫mero √© divis√≠vel por outro quando o
# resto da divis√£o √© zero, ou seja,
# quando o resultado da conta √© um n√∫mero inteiro, sem v√≠rgula.
#
# Exemplos:
# a) 1964 √© um ano bissexto, pois se encaixa no caso 1.
# ‚Üí 1964 √© divis√≠vel por 4 (1964 √∑ 4 = 491).
# ‚Üí 1964 n√£o √© divis√≠vel por 100 (1964 √∑ 100 = 19,64).
#
# b) 2000 √© um ano bissexto, pois se encaixa no caso 2.
# ‚Üí 2000 √© divis√≠vel por 4 (2000 √∑ 4 = 500).
# ‚Üí 2000 √© divis√≠vel por 100 (2000 √∑ 100 = 20).
# ‚Üí 2000 √© divis√≠vel por 400 (2000 √∑ 400 = 5).
#
# c) 1950 n√£o √© um ano bissexto, pois n√£o se encaixa em nenhum dos casos.
# ‚Üí 1950 n√£o √© divis√≠vel por 4 (1950 √∑ 4 = 487,5).
#
# d) 5000 n√£o √© um ano bissexto, pois n√£o se encaixa em nenhum dos casos.
# ‚Üí 5000 √© divis√≠vel por 4 (5000 √∑ 4 = 1250).
# ‚Üí 5000 √© divis√≠vel por 100 (5000 √∑ 100 = 50).
# ‚Üí 5000 n√£o √© divis√≠vel por 400 (5000 √∑ 400 = 12,5).
#
# Assim, podemos definir um algoritmo para saber se um ano √© ou n√£o bissexto.
#-----------------------//-------------------------
from datetime import date
year = int(input('\033[1;97;41mQue ano quer analisar? ü§î\033[m \n\033[1;7;97;40m Coloque 0 para analisar o ano atual:\033[m '))
if year == 0:
    year = date.today().year
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print(f'\033[97;42mO ano {year} √© BISSEXTO.\033[m')
else:
    print(f'\033[97;41mO ano {year} N√ÉO √© BISSEXTO.\033[m')
